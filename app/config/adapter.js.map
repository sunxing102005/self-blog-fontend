{
    "version": 3,
    "sources": [
        "../../src/config/adapter.js"
    ],
    "names": [
        "fileCache",
        "require",
        "JWTSession",
        "mysql",
        "Console",
        "File",
        "DateFile",
        "path",
        "isDev",
        "think",
        "env",
        "nunjucks",
        "exports",
        "cache",
        "type",
        "common",
        "timeout",
        "file",
        "handle",
        "cachePath",
        "join",
        "ROOT_PATH",
        "pathDepth",
        "gcInterval",
        "model",
        "logConnect",
        "logSql",
        "logger",
        "msg",
        "info",
        "database",
        "prefix",
        "encoding",
        "host",
        "port",
        "user",
        "password",
        "dateStrings",
        "session",
        "cookie",
        "name",
        "jwt",
        "secret",
        "tokenType",
        "tokenName",
        "sign",
        "expiresIn",
        "verify",
        "view",
        "viewPath",
        "sep",
        "extname",
        "options",
        "autoescape",
        "console",
        "backups",
        "absolute",
        "maxLogSize",
        "filename",
        "dateFile",
        "level",
        "pattern",
        "alwaysIncludePattern"
    ],
    "mappings": "AAAA,MAAMA,YAAYC,QAAQ,kBAAR,CAAlB;AACA,MAAMC,aAAaD,QAAQ,mBAAR,CAAnB;AACA,MAAME,QAAQF,QAAQ,mBAAR,CAAd;AACA,MAAM,EAAEG,OAAF,EAAWC,IAAX,EAAiBC,QAAjB,KAA8BL,QAAQ,eAAR,CAApC;AACA,MAAMM,OAAON,QAAQ,MAAR,CAAb;AACA,MAAMO,QAAQC,MAAMC,GAAN,KAAc,aAA5B;AACA;AACA,MAAMC,WAAWV,QAAQ,qBAAR,CAAjB;AACA;;;;AAIAW,QAAQC,KAAR,GAAgB;AACZC,UAAM,MADM;AAEZC,YAAQ;AACJC,iBAAS,KAAK,EAAL,GAAU,EAAV,GAAe,IADpB,CACyB;AADzB,KAFI;AAKZC,UAAM;AACFC,gBAAQlB,SADN;AAEFmB,mBAAWZ,KAAKa,IAAL,CAAUX,MAAMY,SAAhB,EAA2B,eAA3B,CAFT,EAEsD;AACxDC,mBAAW,CAHT;AAIFC,oBAAY,KAAK,EAAL,GAAU,EAAV,GAAe,IAJzB,CAI8B;AAJ9B;AALM,CAAhB;;AAaA;;;;AAIAX,QAAQY,KAAR,GAAgB;AACZV,UAAM,OADM;AAEZC,YAAQ;AACJU,oBAAY,KADR;AAEJC,gBAAQlB,KAFJ;AAGJmB,gBAAQC,OAAOnB,MAAMkB,MAAN,CAAaE,IAAb,CAAkBD,GAAlB;AAHX,KAFI;AAOZzB,WAAO;AACHe,gBAAQf,KADL;AAEH2B,kBAAU,MAFP;AAGHC,gBAAQ,KAHL;AAIHC,kBAAU,MAJP;AAKHC,cAAM,YALH;AAMHC,cAAM,IANH;AAOHC,cAAM,MAPH;AAQHC,kBAAU,UARP;AASHC,qBAAa;AATV;AAPK,CAAhB;;AAoBA;;;;AAIAzB,QAAQ0B,OAAR,GAAkB;AACdxB,UAAM,KADQ;AAEdC,YAAQ;AACJwB,gBAAQ;AACJC,kBAAM;AADF;AADJ,KAFM;AAOdC,SAAK;AACDvB,gBAAQhB,UADP;AAEDwC,gBAAQ,MAFP,EAEe;AAChBC,mBAAW,QAHV,EAGoB;AACrBC,mBAAW,cAJV,EAI0B;AAC3BC,cAAM;AACFC,uBAAW,KAAK,EAAL,GAAU;AADnB,SALL;AAQDC,gBAAQ;AACJ;AADI;AARP;AAPS,CAAlB;;AAqBA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAnC,QAAQoC,IAAR,GAAe;AACXlC,UAAM,UADK;AAEXC,YAAQ;AACJkC,kBAAU1C,KAAKa,IAAL,CAAUX,MAAMY,SAAhB,EAA2B,MAA3B,CADN;AAEJ6B,aAAK,GAFD;AAGJC,iBAAS;AAHL,KAFG;AAOXxC,cAAU;AACNO,gBAAQP,QADF;AAENyC,iBAAS;AACLC,wBAAY;AADP;AAFH;AAPC,CAAf;AAcA;;;;AAIAzC,QAAQe,MAAR,GAAiB;AACbb,UAAMN,QAAQ,SAAR,GAAoB,UADb;AAEb8C,aAAS;AACLpC,gBAAQd;AADH,KAFI;AAKba,UAAM;AACFC,gBAAQb,IADN;AAEFkD,iBAAS,EAFP,EAEW;AACbC,kBAAU,IAHR;AAIFC,oBAAY,KAAK,IAJf,EAIqB;AACvBC,kBAAUnD,KAAKa,IAAL,CAAUX,MAAMY,SAAhB,EAA2B,cAA3B;AALR,KALO;AAYbsC,cAAU;AACNzC,gBAAQZ,QADF;AAENsD,eAAO,KAFD;AAGNJ,kBAAU,IAHJ;AAINK,iBAAS,aAJH;AAKNC,8BAAsB,IALhB;AAMNJ,kBAAUnD,KAAKa,IAAL,CAAUX,MAAMY,SAAhB,EAA2B,cAA3B;AANJ;AAZG,CAAjB",
    "file": "../../src/config/adapter.js",
    "sourcesContent": [
        "const fileCache = require(\"think-cache-file\");\nconst JWTSession = require(\"think-session-jwt\");\nconst mysql = require(\"think-model-mysql\");\nconst { Console, File, DateFile } = require(\"think-logger3\");\nconst path = require(\"path\");\nconst isDev = think.env === \"development\";\n// const ejs = require('think-view-ejs');\nconst nunjucks = require(\"think-view-nunjucks\");\n/**\n * cache adapter config\n * @type {Object}\n */\nexports.cache = {\n    type: \"file\",\n    common: {\n        timeout: 24 * 60 * 60 * 1000 // millisecond\n    },\n    file: {\n        handle: fileCache,\n        cachePath: path.join(think.ROOT_PATH, \"runtime/cache\"), // absoulte path is necessarily required\n        pathDepth: 1,\n        gcInterval: 24 * 60 * 60 * 1000 // gc interval\n    }\n};\n\n/**\n * model adapter config\n * @type {Object}\n */\nexports.model = {\n    type: \"mysql\",\n    common: {\n        logConnect: false,\n        logSql: isDev,\n        logger: msg => think.logger.info(msg)\n    },\n    mysql: {\n        handle: mysql,\n        database: \"blog\",\n        prefix: \"sx_\",\n        encoding: \"utf8\",\n        host: \"127.0.0.01\",\n        port: 3306,\n        user: \"root\",\n        password: \"mx102005\",\n        dateStrings: true\n    }\n};\n\n/**\n * session adapter config\n * @type {Object}\n */\nexports.session = {\n    type: \"jwt\",\n    common: {\n        cookie: {\n            name: \"thinkjs\"\n        }\n    },\n    jwt: {\n        handle: JWTSession,\n        secret: \"sunx\", // secret is reqired\n        tokenType: \"header\", // ['query', 'body', 'header', 'cookie'], 'cookie' is default\n        tokenName: \"access_token\", // if tokenType not 'cookie', this will be token name, 'jwt' is default\n        sign: {\n            expiresIn: 60 * 60 * 12\n        },\n        verify: {\n            // verify options is not required\n        }\n    }\n};\n\n/**\n * view adapter config\n * @type {Object}\n */\n// exports.view = {\n//   type: 'ejs',\n//   common: {\n//     viewPath: path.join(think.ROOT_PATH, 'view'),\n//     extname: '.html',\n//     sep: '_' // seperator between controller and action\n//   },\n//   ejs: {\n//     // options\n//     handle: ejs,\n//     beforeRender: (ejs, handleOptions) => {\n//       // do something before render the template.\n//     }\n//   }\n// };\n// 使用ejs，服务端会缓存模板\nexports.view = {\n    type: \"nunjucks\",\n    common: {\n        viewPath: path.join(think.ROOT_PATH, \"view\"),\n        sep: \"_\",\n        extname: \".html\"\n    },\n    nunjucks: {\n        handle: nunjucks,\n        options: {\n            autoescape: false\n        }\n    }\n};\n/**\n * logger adapter config\n * @type {Object}\n */\nexports.logger = {\n    type: isDev ? \"console\" : \"dateFile\",\n    console: {\n        handle: Console\n    },\n    file: {\n        handle: File,\n        backups: 10, // max chunk number\n        absolute: true,\n        maxLogSize: 50 * 1024, // 50M\n        filename: path.join(think.ROOT_PATH, \"logs/app.log\")\n    },\n    dateFile: {\n        handle: DateFile,\n        level: \"ALL\",\n        absolute: true,\n        pattern: \"-yyyy-MM-dd\",\n        alwaysIncludePattern: true,\n        filename: path.join(think.ROOT_PATH, \"logs/app.log\")\n    }\n};\n"
    ]
}
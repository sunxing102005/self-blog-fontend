{
    "version": 3,
    "sources": [
        "../../../src/controller/api/content.js"
    ],
    "names": [
        "BaseRest",
        "require",
        "module",
        "exports",
        "getAction",
        "data",
        "params",
        "id",
        "modelInstance",
        "where",
        "find",
        "userInfo",
        "increament",
        "success",
        "type",
        "get",
        "status",
        "order",
        "fieldReverse",
        "select",
        "limit",
        "field",
        "sum",
        "count",
        "model",
        "recent",
        "content",
        "think",
        "cache",
        "comment",
        "all",
        "key",
        "contentType",
        "page",
        "pageSize",
        "countSelect",
        "putAction",
        "fail",
        "postAction",
        "createTime",
        "post",
        "publishTime",
        "user_id",
        "title",
        "category_id",
        "slug",
        "markdown",
        "tag",
        "thumb",
        "publish_time",
        "view",
        "like",
        "recommend",
        "modify_time",
        "Object",
        "keys",
        "forEach",
        "val",
        "res",
        "save",
        "hook",
        "insert",
        "deleteAction",
        "oldContent",
        "item",
        "decrement",
        "affectedRows",
        "delete"
    ],
    "mappings": "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",
    "file": "../../../src/controller/api/content.js",
    "sourcesContent": [
        "const BaseRest = require(\"../rest.js\");\n\nmodule.exports = class extends BaseRest {\n    async getAction() {\n        let data;\n        const params = {};\n        if (this.id) {\n            params[\"id\"] = this.id;\n            data = await this.modelInstance.where(params).find();\n            if (!this.userInfo) {\n                this.modelInstance.where(params).increament(\"view\");\n            }\n            return this.success(data);\n        }\n        const type = this.get(\"type\") || \"default\";\n        // 归档\n        if (type === \"archives\") {\n            data = await this.modelInstance\n                .where({ status: 99 })\n                .order(\"create_time desc\")\n                .fieldReverse(\"content,markdown\")\n                .select();\n            return this.success(data);\n        }\n        // 热门文章\n        if (type === \"hot\") {\n            data = await this.modelInstance\n                .where({ status: 99 })\n                .order(\"view desc\")\n                .limit(10)\n                .field(\"title,slug,view\")\n                .select();\n            return this.success(data);\n        }\n        // 总览数据\n        if (type === \"summary\") {\n            data = {};\n            data[\"view\"] = await this.modelInstance\n                .where({ status: 99 })\n                .sum(\"view\");\n            data[\"count\"] = await this.modelInstance\n                .where({ status: 99 })\n                .count();\n            data[\"comments\"] = await this.model(\"comment\")\n                .where({ status: 99 })\n                .count();\n            return this.success(data);\n        }\n        if (type === \"recent\") {\n            const recent = {\n                content: think.cache(\"recent_content\"),\n                comment: think.cache(\"recent_comment\")\n            };\n            return { recent };\n        }\n        // 是否获取全部\n        const all = this.get(\"all\");\n        // if (!all || think.isEmpty(this.userInfo)) {\n        if (!all) {\n            params.status = 99;\n        }\n        // 关键词\n        const key = this.get(\"key\");\n        if (key) {\n            params[\"title|description\"] = [\"like\", `%${key}%`];\n        }\n        const status = this.get(\"status\");\n        if (status) {\n            params.status = status;\n        }\n        // 内容类型\n        const contentType = this.get(\"contentType\") || \"post\";\n        params[\"type\"] = contentType;\n        // 页码\n        const page = this.get(\"page\") || 1;\n        // 每页显示数量\n        const pageSize = this.get(\"pageSize\") || 5;\n        data = await this.modelInstance\n            .where(params)\n            .page(page, pageSize)\n            .order(\"create_time desc\")\n            .fieldReverse(\"content,markdown\")\n            .countSelect();\n        return this.success(data);\n    }\n    async putAction() {\n        if (!this.id) {\n            return this.fail(1001, \"文章不存在\");\n        }\n    }\n    async postAction() {\n        const userInfo = this.userInfo;\n        const createTime = this.post(\"date\");\n        let publishTime = null;\n        if (this.post(\"status\") != 1) {\n            publishTime = createTime;\n        }\n        const data = {\n            user_id: userInfo.id,\n            title: this.post(\"title\"),\n            category_id: this.post(\"category_id\"),\n            slug: this.post(\"slug\"),\n            status: this.post(\"status\"),\n            markdown: this.post(\"markdown\"),\n            content: this.post(\"content\"),\n            tag: this.post(\"tag\"),\n            type: this.post(\"type\"),\n            thumb: this.post(\"thumb\") || \"\",\n            publish_time: publishTime,\n            view: 0,\n            like: 0,\n            recommend: this.post(\"recommend\"),\n            // create_time: createTime,\n            modify_time: createTime\n        };\n        if (this.id) {\n            data.id = this.post(\"id\");\n            Object.keys(data).forEach(val => {\n                if (!data[val]) {\n                    delete data[val];\n                }\n            });\n            const res = await this.modelInstance.save(data);\n            await this.hook(\"contentUpdate\", data);\n            if (res) {\n                this.success({ id: this.id }, \"修改成功!\");\n            } else {\n                return this.fail(1000, \"修改失败\");\n            }\n        } else {\n            data[\"create_time\"] = createTime;\n            const id = await this.modelInstance.insert(data);\n            if (id) {\n                data.id = id;\n                this.hook(\"contentCreate\", data);\n                this.success({ id }, \"添加成功!\");\n            } else {\n                return this.fail(1000, \"添加失败\");\n            }\n        }\n    }\n    async deleteAction() {\n        if (!this.id) {\n            return this.fail(1001, \"文章不存在\");\n        }\n        const oldContent = await this.modelInstance\n            .where({ id: this.id })\n            .find();\n        // oldContent.tag.forEach(val => {});\n        for (const item of oldContent.tag) {\n            await think\n                .model(\"meta\")\n                .where({ id: item.id })\n                .decrement(\"count\");\n        }\n        const affectedRows = await this.modelInstance\n            .where({ id: this.id })\n            .delete();\n        if (affectedRows) {\n            this.hook(\"contentDelete\", { id: this.id });\n            return this.success(affectedRows);\n        } else {\n            this.fail(1000, \"删除失败\");\n        }\n    }\n};\n"
    ]
}
{
    "version": 3,
    "sources": [
        "../../src/controller/content.js"
    ],
    "names": [
        "Base",
        "require",
        "module",
        "exports",
        "listAction",
        "condition",
        "status",
        "type",
        "page",
        "get",
        "pageSize",
        "list",
        "model",
        "where",
        "fieldReverse",
        "order",
        "countSelect",
        "success",
        "content",
        "listNoPageAction",
        "defaultOrderby",
        "defaultFieldReverse",
        "recommend",
        "orderby",
        "category_id",
        "select",
        "recentAction",
        "recent",
        "think",
        "cache",
        "comment",
        "recentFiveBlogsAction",
        "getRecent",
        "detailAction",
        "params",
        "slug",
        "find",
        "assign",
        "title",
        "replyTo",
        "increment",
        "getBlogByIdAction",
        "id",
        "getLastAndNextBlogAction",
        "date",
        "post",
        "lastBlogSql",
        "nextBlogSql",
        "lastBlog",
        "query",
        "nextBlog",
        "changeLikesAction",
        "msg",
        "decrement",
        "commentAction",
        "isEmpty",
        "redirect",
        "data",
        "content_id",
        "author",
        "email",
        "url",
        "agent",
        "header",
        "text",
        "parent_id",
        "create_time",
        "Date",
        "getTime",
        "insertId",
        "add"
    ],
    "mappings": "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",
    "file": "../../src/controller/content.js",
    "sourcesContent": [
        "const Base = require('./base.js');\nmodule.exports = class extends Base {\n  async listAction() {\n    const condition = {\n      status: 99,\n      type: 'post'\n    };\n    const page = this.get('page') || 1;\n    const pageSize = this.get('pageSize') || 5;\n    const list = await this.model('content')\n      .where(condition)\n      .page(page, pageSize)\n      .fieldReverse('content,markdown')\n      .order('create_time desc')\n      .countSelect();\n    return this.success({ content: list });\n  }\n  async listNoPageAction() {\n    const condition = {\n      status: 99,\n      type: 'post'\n    };\n    const defaultOrderby = 'create_time desc';\n    const defaultFieldReverse = 'markdown';\n    const recommend = this.get('recommend');\n    let orderby = this.get('orderby');\n    let fieldReverse = this.get('fieldReverse');\n    const category_id = this.get('category_id');\n    category_id ? (condition['category_id'] = category_id) : '';\n    !fieldReverse ? (fieldReverse = defaultFieldReverse) : '';\n    recommend ? (condition['recommend'] = recommend) : '';\n    orderby ? '' : (orderby = defaultOrderby);\n    const list = await this.model('content')\n      .where(condition)\n      .fieldReverse(fieldReverse)\n      .order(orderby)\n      .select();\n    return this.success({ content: list });\n  }\n  async recentAction() {\n    const recent = {\n      content: await think.cache('recent_content'),\n      comment: await think.cache('recent_comment')\n    };\n    return this.success({ recent });\n  }\n  async recentFiveBlogsAction() {\n    const recent = await this.getRecent();\n    return this.success({ recent });\n  }\n  async detailAction() {\n    const params = {\n      // status: \"99\",\n      // type: \"post\",\n      slug: this.get('slug')\n    };\n    const content = await this.model('content')\n      .where(params)\n      .find();\n    // console.log(\"detail1\", content);\n    // if (think.isEmpty(content)) {\n    //     return this.redirect(\"/\");\n    // }\n    this.assign('content', content);\n    this.assign('title', content.title);\n    const replyTo = this.get('replyTo') || 0;\n    this.assign('replyTo', replyTo);\n    // 增加阅读量\n    this.model('content')\n      .where(params)\n      .increment('view');\n    return this.success({ content: content });\n  }\n  async getBlogByIdAction() {\n    const defaultFieldReverse = 'markdown';\n    let fieldReverse = this.get('fieldReverse');\n    !fieldReverse ? (fieldReverse = defaultFieldReverse) : '';\n    const params = {\n      id: this.get('id')\n    };\n    const content = await this.model('content')\n      .where(params)\n      .fieldReverse(fieldReverse)\n      .find();\n    this.assign('content', content);\n    this.assign('title', content.title);\n    const replyTo = this.get('replyTo') || 0;\n    this.assign('replyTo', replyTo);\n    // 增加阅读量\n    this.model('content')\n      .where(params)\n      .increment('view');\n    return this.success({ content: content });\n  }\n  async getLastAndNextBlogAction() {\n    const date = this.post('date'); // 当前博客\n    const lastBlogSql = ` \n        select id,title from sx_content where abs(publish_time-str_to_date('${date}','%Y-%m-%d %T'))\n         in( select min(abs(publish_time-str_to_date('${date}','%Y-%m-%d %T'))) from sx_content where status=99 \n         and publish_time<'${date}' and type = 'post')\n        `;\n    const nextBlogSql = ` \n        select id,title from sx_content where abs(publish_time-str_to_date('${date}','%Y-%m-%d %T'))\n        in( select min(abs(publish_time-str_to_date('${date}','%Y-%m-%d %T'))) from sx_content where status=99 \n        and publish_time>'${date}' and type = 'post')\n        `;\n    const lastBlog = await this.model().query(lastBlogSql);\n    const nextBlog = await this.model().query(nextBlogSql);\n    this.success({ lastBlog, nextBlog });\n  }\n  async changeLikesAction() {\n    let type = this.get('type'),\n      id = this.get('id');\n    if (type == 'plus') {\n      this.model('content')\n        .where({ id })\n        .increment('like');\n      return this.success({ msg: '喜欢+1！' });\n    } else {\n      this.model('content')\n        .where({ id })\n        .decrement('like');\n      return this.success({ msg: '取消喜欢' });\n    }\n  }\n  async commentAction() {\n    const params = {\n      status: 99,\n      slug: this.post('slug'),\n      type: 'post'\n    };\n    const content = await this.model('content')\n      .where(params)\n      .find();\n    if (think.isEmpty(content)) {\n      return this.redirect('/');\n    }\n    const data = {\n      content_id: content.id,\n      author: this.post('author'),\n      email: this.post('email'),\n      url: this.post('url'),\n      agent: this.header('User-Agent'),\n      text: this.post('text'),\n      status: 99,\n      parent_id: this.post('parent_id'),\n      create_time: new Date().getTime() / 1000\n    };\n    const insertId = await this.model('comment').add(data);\n    if (insertId) {\n      this.success({ insertId });\n    }\n  }\n};\n"
    ]
}
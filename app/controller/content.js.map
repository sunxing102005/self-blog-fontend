{
    "version": 3,
    "sources": [
        "../../src/controller/content.js"
    ],
    "names": [
        "Base",
        "require",
        "module",
        "exports",
        "listAction",
        "condition",
        "status",
        "type",
        "page",
        "get",
        "pageSize",
        "list",
        "model",
        "where",
        "fieldReverse",
        "order",
        "countSelect",
        "success",
        "content",
        "listNoPageAction",
        "category_id",
        "defaultOrderby",
        "defaultFieldReverse",
        "recommend",
        "orderby",
        "categoryId",
        "select",
        "recentAction",
        "recent",
        "think",
        "cache",
        "comment",
        "recentFiveBlogsAction",
        "getRecent",
        "detailAction",
        "params",
        "slug",
        "find",
        "assign",
        "title",
        "replyTo",
        "increment",
        "getBlogByIdAction",
        "id",
        "getLastAndNextBlogAction",
        "date",
        "post",
        "lastBlogSql",
        "nextBlogSql",
        "lastBlog",
        "query",
        "nextBlog",
        "changeLikesAction",
        "msg",
        "decrement",
        "commentAction",
        "isEmpty",
        "redirect",
        "data",
        "content_id",
        "author",
        "email",
        "url",
        "agent",
        "header",
        "text",
        "parent_id",
        "create_time",
        "Date",
        "getTime",
        "insertId",
        "add"
    ],
    "mappings": "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",
    "file": "../../src/controller/content.js",
    "sourcesContent": [
        "const Base = require(\"./base.js\");\nmodule.exports = class extends Base {\n    async listAction() {\n        const condition = {\n            status: 99,\n            type: \"post\"\n        };\n        const page = this.get(\"page\") || 1;\n        const pageSize = this.get(\"pageSize\") || 5;\n        const list = await this.model(\"content\")\n            .where(condition)\n            .page(page, pageSize)\n            .fieldReverse(\"content,markdown\")\n            .order(\"create_time desc\")\n            .countSelect();\n        return this.success({ content: list });\n    }\n    async listNoPageAction() {\n        const condition = {\n            status: 99,\n            type: \"post\",\n            category_id: [\"IN\", [1, 2]]\n        };\n        const defaultOrderby = \"create_time desc\";\n        const defaultFieldReverse = \"markdown\";\n        const recommend = this.get(\"recommend\");\n        let orderby = this.get(\"orderby\");\n        let fieldReverse = this.get(\"fieldReverse\");\n        const categoryId = this.get(\"category_id\");\n        categoryId ? (condition[\"category_id\"] = categoryId) : \"\";\n        !fieldReverse ? (fieldReverse = defaultFieldReverse) : \"\";\n        recommend ? (condition[\"recommend\"] = recommend) : \"\";\n        orderby ? \"\" : (orderby = defaultOrderby);\n        const list = await this.model(\"content\")\n            .where(condition)\n            .fieldReverse(fieldReverse)\n            .order(orderby)\n            .select();\n        return this.success({ content: list });\n    }\n    async recentAction() {\n        const recent = {\n            content: await think.cache(\"recent_content\"),\n            comment: await think.cache(\"recent_comment\")\n        };\n        return this.success({ recent });\n    }\n    async recentFiveBlogsAction() {\n        const recent = await this.getRecent();\n        return this.success({ recent });\n    }\n    async detailAction() {\n        const params = {\n            // status: \"99\",\n            // type: \"post\",\n            slug: this.get(\"slug\")\n        };\n        const content = await this.model(\"content\")\n            .where(params)\n            .find();\n        // console.log(\"detail1\", content);\n        // if (think.isEmpty(content)) {\n        //     return this.redirect(\"/\");\n        // }\n        this.assign(\"content\", content);\n        this.assign(\"title\", content.title);\n        const replyTo = this.get(\"replyTo\") || 0;\n        this.assign(\"replyTo\", replyTo);\n        // 增加阅读量\n        this.model(\"content\")\n            .where(params)\n            .increment(\"view\");\n        return this.success({ content: content });\n    }\n    async getBlogByIdAction() {\n        const defaultFieldReverse = \"markdown\";\n        let fieldReverse = this.get(\"fieldReverse\");\n        !fieldReverse ? (fieldReverse = defaultFieldReverse) : \"\";\n        const params = {\n            id: this.get(\"id\")\n        };\n        const content = await this.model(\"content\")\n            .where(params)\n            .fieldReverse(fieldReverse)\n            .find();\n        this.assign(\"content\", content);\n        this.assign(\"title\", content.title);\n        const replyTo = this.get(\"replyTo\") || 0;\n        this.assign(\"replyTo\", replyTo);\n        // 增加阅读量\n        this.model(\"content\")\n            .where(params)\n            .increment(\"view\");\n        return this.success({ content: content });\n    }\n    async getLastAndNextBlogAction() {\n        const date = this.post(\"date\"); // 当前博客\n        const lastBlogSql = ` \n        select id,title from sx_content where abs(publish_time-str_to_date('${date}','%Y-%m-%d %T'))\n         in( select min(abs(publish_time-str_to_date('${date}','%Y-%m-%d %T'))) from sx_content where status=99 \n         and publish_time<'${date}' and type = 'post' and category_id in (1,2))\n        `;\n        const nextBlogSql = ` \n        select id,title from sx_content where abs(publish_time-str_to_date('${date}','%Y-%m-%d %T'))\n        in( select min(abs(publish_time-str_to_date('${date}','%Y-%m-%d %T'))) from sx_content where status=99 \n        and publish_time>'${date}' and type = 'post' and category_id in (1,2))\n        `;\n        const lastBlog = await this.model().query(lastBlogSql);\n        const nextBlog = await this.model().query(nextBlogSql);\n        this.success({ lastBlog, nextBlog });\n    }\n    async changeLikesAction() {\n        let type = this.get(\"type\"),\n            id = this.get(\"id\");\n        if (type == \"plus\") {\n            this.model(\"content\")\n                .where({ id })\n                .increment(\"like\");\n            return this.success({ msg: \"喜欢+1！\" });\n        } else {\n            this.model(\"content\")\n                .where({ id })\n                .decrement(\"like\");\n            return this.success({ msg: \"取消喜欢\" });\n        }\n    }\n    async commentAction() {\n        const params = {\n            status: 99,\n            slug: this.post(\"slug\"),\n            type: \"post\"\n        };\n        const content = await this.model(\"content\")\n            .where(params)\n            .find();\n        if (think.isEmpty(content)) {\n            return this.redirect(\"/\");\n        }\n        const data = {\n            content_id: content.id,\n            author: this.post(\"author\"),\n            email: this.post(\"email\"),\n            url: this.post(\"url\"),\n            agent: this.header(\"User-Agent\"),\n            text: this.post(\"text\"),\n            status: 99,\n            parent_id: this.post(\"parent_id\"),\n            create_time: new Date().getTime() / 1000\n        };\n        const insertId = await this.model(\"comment\").add(data);\n        if (insertId) {\n            this.success({ insertId });\n        }\n    }\n};\n"
    ]
}
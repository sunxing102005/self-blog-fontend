{
    "version": 3,
    "sources": [
        "../../src/controller/rest.js"
    ],
    "names": [
        "assert",
        "require",
        "module",
        "exports",
        "think",
        "Controller",
        "_REST",
        "constructor",
        "ctx",
        "resource",
        "getResource",
        "id",
        "getId",
        "isFunction",
        "model",
        "modelInstance",
        "__before",
        "controller",
        "split",
        "pop",
        "get",
        "isString",
        "isNumber",
        "last",
        "path",
        "slice",
        "getAction",
        "data",
        "pk",
        "where",
        "find",
        "success",
        "select",
        "postAction",
        "post",
        "isEmpty",
        "fail",
        "insertId",
        "add",
        "deleteAction",
        "rows",
        "delete",
        "affectedRows",
        "putAction",
        "update",
        "__call"
    ],
    "mappings": "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",
    "file": "../../src/controller/rest.js",
    "sourcesContent": [
        "const assert = require(\"assert\");\n\nmodule.exports = class extends think.Controller {\n    static get _REST() {\n        return true;\n    }\n\n    constructor(ctx) {\n        super(ctx);\n        this.resource = this.getResource();\n        this.id = this.getId();\n        assert(think.isFunction(this.model), \"this.model must be a function\");\n        this.modelInstance = this.model(this.resource);\n    }\n    async __before() {\n        // this.header('Access-Control-Allow-Origin', '*');\n        // this.userInfo = await this.session('userInfo').catch(() => {});\n        // const isAllowedMethod = this.isMethod('GET');\n        // const isAllowedResource =\n        //         this.resource === 'login' || this.resource === 'meta';\n        // const isLogin = !(\n        //   think.isEmpty(this.userInfo) ||\n        //         typeof this.userInfo.TokenExpiredError !== 'undefined' ||\n        //         (this.userInfo.name && this.userInfo.name.indexOf('Error') != -1)\n        // );\n        // if (!isAllowedResource && !isLogin && !isAllowedMethod) {\n        //   return this.ctx.throw(401, '请登录后操作');\n        // }\n    }\n    /**\n     * get resource\n     * @return {String} [resource name]\n     */\n    getResource() {\n        return this.ctx.controller.split(\"/\").pop();\n    }\n    getId() {\n        const id = this.get(\"id\");\n        if (id && (think.isString(id) || think.isNumber(id))) {\n            return id;\n        }\n        const last = this.ctx.path.split(\"/\").slice(-1)[0];\n        if (last !== this.resource) {\n            return last;\n        }\n        return \"\";\n    }\n    async getAction() {\n        let data;\n        if (this.id) {\n            const pk = this.modelInstance.pk;\n            data = await this.modelInstance.where({ [pk]: this.id }).find();\n            return this.success(data);\n        }\n        data = await this.modelInstance.select();\n        return this.success(data);\n    }\n    /**\n     * put resource\n     * @return {Promise} []\n     */\n    async postAction() {\n        const pk = this.modelInstance.pk;\n        const data = this.post();\n        delete data[pk];\n        if (think.isEmpty(data)) {\n            return this.fail(\"data is empty\");\n        }\n        const insertId = await this.modelInstance.add(data);\n        return this.success({ id: insertId });\n    }\n    /**\n     * delete resource\n     * @return {Promise} []\n     */\n    async deleteAction() {\n        if (!this.id) {\n            return this.fail(\"params error\");\n        }\n        const pk = this.modelInstance.pk;\n        const rows = await this.modelInstance.where({ [pk]: this.id }).delete();\n        return this.success({ affectedRows: rows });\n    }\n    /**\n     * update resource\n     * @return {Promise} []\n     */\n    async putAction() {\n        if (!this.id) {\n            return this.fail(\"params error\");\n        }\n        const pk = this.modelInstance.pk;\n        const data = this.post();\n        data[pk] = this.id; // rewrite data[pk] forbidden data[pk] !== this.id\n        if (think.isEmpty(data)) {\n            return this.fail(\"data is empty\");\n        }\n        const rows = await this.modelInstance\n            .where({ [pk]: this.id })\n            .update(data);\n        return this.success({ affectedRows: rows });\n    }\n    __call() {}\n};\n"
    ]
}
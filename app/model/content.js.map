{
    "version": 3,
    "sources": [
        "../../src/model/content.js"
    ],
    "names": [
        "module",
        "exports",
        "think",
        "Model",
        "relation",
        "category",
        "type",
        "BELONG_TO",
        "model",
        "key",
        "fKey",
        "field",
        "tag",
        "MANY_TO_MANY",
        "rModel",
        "rfKey",
        "comment",
        "HAS_MANY",
        "where",
        "order",
        "user",
        "insert",
        "data",
        "tags",
        "Array",
        "from",
        "parseContent",
        "id",
        "add",
        "forEach",
        "push",
        "content_id",
        "meta_id",
        "val",
        "addMany",
        "updateCount",
        "category_id",
        "save",
        "oldContent",
        "find",
        "decrement",
        "oldTags",
        "indexOf",
        "delete",
        "length",
        "res",
        "update",
        "content",
        "description",
        "split",
        "slug",
        "md5",
        "Date",
        "categoryId",
        "tagIds",
        "cateCount",
        "count"
    ],
    "mappings": "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",
    "file": "../../src/model/content.js",
    "sourcesContent": [
        "module.exports = class extends think.Model {\n    // 模型关联\n    get relation() {\n        return {\n            category: {\n                type: think.Model.BELONG_TO,\n                model: \"meta\",\n                key: \"category_id\",\n                fKey: \"id\",\n                field: \"id,name,slug,description,count\"\n            },\n            tag: {\n                type: think.Model.MANY_TO_MANY,\n                model: \"meta\",\n                rModel: \"relationship\",\n                rfKey: \"meta_id\",\n                key: \"id\",\n                fKey: \"content_id\",\n                field: \"id,name,slug,description,count\"\n            },\n            comment: {\n                type: think.Model.HAS_MANY,\n                key: \"id\",\n                fKey: \"content_id\",\n                where: \"status=99\",\n                order: \"create_time desc\"\n            },\n            user: {\n                type: think.Model.BELONG_TO,\n                model: \"user\",\n                key: \"user_id\",\n                fKey: \"id\",\n                field: \"id,username,email,qq,github,weibo,zhihu\"\n            }\n        };\n    }\n\n    // 添加文章\n    async insert(data) {\n        const tags = Array.from(data.tag);\n        data = this.parseContent(data);\n        delete data.tag;\n        const id = await this.add(data);\n        const relation = [];\n        tags.forEach(val => {\n            relation.push({\n                content_id: id,\n                meta_id: val\n            });\n        });\n        think.model(\"relationship\").addMany(relation);\n        // 更新文章数量\n        this.updateCount(data.category_id, tags);\n        return id;\n    }\n    async save(data) {\n        const tags = data.tag;\n        data = this.parseContent(data);\n        delete data.tag;\n        const relation = [];\n\n        const oldContent = await this.where({ id: data.id }).find();\n        if (oldContent.category_id != data.category_id) {\n            // 修改文章分类\n            think\n                .model(\"meta\")\n                .where({ id: oldContent.category_id })\n                .decrement(\"count\");\n        }\n        const oldTags = oldContent.tag;\n        oldTags.forEach(val => {\n            if (tags.indexOf(val.id) == -1) {\n                think\n                    .model(\"meta\")\n                    .where({ id: val.id })\n                    .decrement(\"count\");\n            }\n        });\n        tags.forEach(val => {\n            relation.push({\n                content_id: data.id,\n                meta_id: val\n            });\n        });\n        await think\n            .model(\"relationship\")\n            .where({ content_id: data.id })\n            .delete();\n        if (relation.length > 0) think.model(\"relationship\").addMany(relation);\n        const res = await this.where({ id: data.id }).update(data);\n        if (res) {\n            this.updateCount(data.category_id, tags);\n        }\n        return res;\n    }\n    // 处理内容，生成文章简介\n    parseContent(data) {\n        // 描述处理\n        if (data.content.indexOf(\"<!--more-->\") > -1) {\n            data.description = data.content.split(\"<!--more-->\")[0]; // 写文章内容时，description部分是<!--more-->前面的部分,要自己写\n        } else {\n            data.description = \"\";\n        }\n        // 唯一标识处理\n        if (!data.slug) {\n            data.slug = think.md5(new Date());\n        }\n        return data;\n    }\n    async updateCount(categoryId, tagIds) {\n        const cateCount = await this.where({ category_id: categoryId }).count();\n        think\n            .model(\"meta\")\n            .where({ id: categoryId })\n            .update({ count: cateCount });\n        for (const id of tagIds) {\n            const count = await think\n                .model(\"relationship\")\n                .where({ meta_id: id })\n                .count();\n            think\n                .model(\"meta\")\n                .where({ id })\n                .update({ count });\n        }\n    }\n};\n"
    ]
}